services:
  db:
    container_name: ${POSTGRES_DB}
    image: postgres:16.2-alpine3.19
    restart: on-failure
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./app-db-data/pgdata:/var/lib/postgresql/data
    # We also need a health check. We will use it in the next section for writing the Flask app part. The reason is our Flask app requires the database to be up and ready in order to run.
    healthcheck:      
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} -t 1"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 10s

  adminer:
    image: adminer
    restart: always
    networks:
      - traefik-public
      - default
    depends_on:
      - db
    environment:
      - ADMINER_DESIGN=pepa-linha-dark
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.routers.${STACK_NAME}-adminer-http.rule=Host(`adminer.${DOMAIN}`)
      - traefik.http.routers.${STACK_NAME}-adminer-http.entrypoints=http
      - traefik.http.routers.${STACK_NAME?}-adminer-http.middlewares=https-redirect
      - traefik.http.routers.${STACK_NAME}-adminer-https.rule=Host(`adminer.${DOMAIN}`)
      - traefik.http.routers.${STACK_NAME}-adminer-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME}-adminer-https.tls=true
      - traefik.http.routers.${STACK_NAME}-adminer-https.tls.certresolver=le
      - traefik.http.services.${STACK_NAME}-adminer.loadbalancer.server.port=8080

  backend:
    image: '${DOCKER_IMAGE_BACKEND}:${TAG-latest}'
    restart: always
    networks:
      - traefik-public
      - default
    depends_on:
      - db
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD}
      - USERS_OPEN_REGISTRATION=${USERS_OPEN_REGISTRATION}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - SENTRY_DSN=${SENTRY_DSN}

    build:
      context: ./backend
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    platform: linux/amd64 # Patch for M1 Mac
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public

      - traefik.http.services.${STACK_NAME}-backend.loadbalancer.server.port=80

      - traefik.http.routers.${STACK_NAME}-backend-http.rule=Host(`${DOMAIN}`, `www.${DOMAIN}`) && PathPrefix(`/api`, `/docs`, `/redoc`)
      - traefik.http.routers.${STACK_NAME}-backend-http.entrypoints=http

      - traefik.http.routers.${STACK_NAME}-backend-https.rule=Host(`${DOMAIN}`, `www.${DOMAIN}`) && PathPrefix(`/api`, `/docs`, `/redoc`)
      - traefik.http.routers.${STACK_NAME}-backend-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME}-backend-https.tls=true
      - traefik.http.routers.${STACK_NAME}-backend-https.tls.certresolver=le

      - traefik.http.routers.${STACK_NAME}-backend-http.middlewares=https-redirect,${STACK_NAME}-www-redirect
      - traefik.http.routers.${STACK_NAME}-backend-https.middlewares=${STACK_NAME}-www-redirect

  frontend:
    image: '${DOCKER_IMAGE_FRONTEND}:${TAG-latest}'
    restart: always
    networks:
      - traefik-public
      - default
    build:
      context: ./frontend
      args:
        - VITE_API_URL=https://${DOMAIN}
        - NODE_ENV=production
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public

      - traefik.http.services.${STACK_NAME}-frontend.loadbalancer.server.port=80

      - traefik.http.routers.${STACK_NAME}-frontend-http.rule=Host(`${DOMAIN}`, `www.${DOMAIN}`)
      - traefik.http.routers.${STACK_NAME}-frontend-http.entrypoints=http

      - traefik.http.routers.${STACK_NAME}-frontend-https.rule=Host(`${DOMAIN}`, `www.${DOMAIN}`)
      - traefik.http.routers.${STACK_NAME}-frontend-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME}-frontend-https.tls=true
      - traefik.http.routers.${STACK_NAME}-frontend-https.tls.certresolver=le

      # Handle domain with and without "www" to redirect to only one
      # To disable www redirection remove the next line
      - traefik.http.middlewares.${STACK_NAME}-www-redirect.redirectregex.regex=^http(s)?://www.(${DOMAIN})/(.*)
      # Redirect a domain with www to non-www
      # To disable it remove the next line
      - traefik.http.middlewares.${STACK_NAME}-www-redirect.redirectregex.replacement=http$${1}://${DOMAIN}/$${3}
      # Middleware to redirect www, to disable it remove the next line
      - traefik.http.routers.${STACK_NAME}-frontend-https.middlewares=${STACK_NAME}-www-redirect
      # Middleware to redirect www, and redirect HTTP to HTTPS
      # to disable www redirection remove the section: ${STACK_NAME}-www-redirect,
      - traefik.http.routers.${STACK_NAME}-frontend-http.middlewares=https-redirect,${STACK_NAME}-www-redirect
volumes:
  app-db-data:

networks:
  traefik-public:
    # Allow setting it to false for testing
    external: true
